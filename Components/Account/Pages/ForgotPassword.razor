@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorApp1.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<hr class="mb-4" />
<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post" class="p-4 border rounded shadow-sm bg-white">
            <DataAnnotationsValidator />
            <h3 class="text-center mb-4 p-3 bg-light rounded d-none d-md-block"
                style="white-space: nowrap; color: #ebe6fa; -webkit-text-stroke: 1px #654ea3;">
                Forgot password?
            </h3>
            <h4 class="text-center mb-3">Enter your email.</h4>

            <ValidationSummary class="text-danger mb-3" role="alert" />

            <!-- Email Input -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger small" />
            </div>

            <!-- Submit Button -->
            <button type="submit" class="w-100 btn btn-primary btn-lg">Reset password</button>
        </EditForm>
    </div>
</div>
<style>
    .btn-primary {
        background: linear-gradient(to right, #fbc2eb, #a6c1ee); /* Pink to light blue gradient */
        color: white;
        border: none;
    }

        .btn-primary:hover {
            background: linear-gradient(to right, #a6c1ee, #fbc2eb); /* Reverse gradient on hover */
            color: white;
            border-color: #004085;
        }
</style>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
